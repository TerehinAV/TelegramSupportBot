from aiogram.filters import Command
from aiogram.types import Message
from aiogram import Router
from aiogram import F
from datetime import datetime
from config import SUPPORT_CHAT_ID
from models import Ticket, MessageLog
from database import db
from keyboards import close_ticket_keyboard


user_router = Router(name="user")


@user_router.message(Command("status"))
async def ticket_status(message: Message):
    db.connect(reuse_if_open=True)

    ticket = Ticket.select().where(
        (Ticket.user_id == message.from_user.id) & (Ticket.is_closed == False)
    ).first()

    if not ticket:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
    else:
        messages_count = MessageLog.select().where(MessageLog.ticket == ticket, Ticket.user_id == message.from_user.id).join(Ticket).count()
        await message.answer(
            f"üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è:\n"
            f"üÜî –¢–∏–∫–µ—Ç #{ticket.id}\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç"
        )

    db.close()


@user_router.message(Command("cancel"))
async def cancel_ticket(message: Message):
    db.connect(reuse_if_open=True)

    ticket = Ticket.select().where(
        (Ticket.user_id == message.from_user.id) & (Ticket.is_closed == False)
    ).first()

    if not ticket:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        db.close()
        return

    ticket.is_closed = True
    ticket.save()

    # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç ‚úÖ")

    # –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await message.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ (#ticket_{ticket.id})."
        )
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É:", e)

    db.close()


@user_router.message(F.chat.type.in_({"private"}))
async def handle_user_message(message: Message):
    user_id = message.from_user.id

    db.connect(reuse_if_open=True)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
    ticket = Ticket.select().where(
        (Ticket.user_id == user_id) & (Ticket.is_closed == False)
    ).first()

    # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    if not ticket:
        ticket = Ticket.create(
            user_id=user_id,
            username=message.from_user.username,
            original_message_id=message.message_id,
            forwarded_message_id=0,  # –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
            created_at=datetime.now(),
        )

    # üßº –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    last_log = (
        MessageLog
        .select()
        .where(MessageLog.ticket == ticket)
        .order_by(MessageLog.created_at.desc())
        .first()
    )

    if last_log:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=SUPPORT_CHAT_ID,
                message_id=last_log.forwarded_message_id,
                reply_markup=None
            )
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É:", e)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}\n"
        f"#ticket_{ticket.id}\n\n"
        f"{message.text}\n\n"
        f"‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    sent = await message.bot.send_message(
        chat_id=SUPPORT_CHAT_ID,
        text=text,
        # üëá –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        reply_markup=None
    )

    # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    MessageLog.create(
        ticket=ticket,
        user_message_id=message.message_id,
        forwarded_message_id=sent.message_id,
        sender='user',
        text=message.text
    )

    await sent.edit_reply_markup(reply_markup=close_ticket_keyboard(sent.message_id))

    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚úÖ\n"
        "‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Äî /cancel\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî /status"
    )
